import json
import os
from datetime import datetime
from portfolio import TARGET_WEIGHTS

LAST_PURCHASE = {t: None for t in TARGET_WEIGHTS.keys()}

def load_current_values():
    if not os.path.exists("prices.json") or os.path.getsize("prices.json") == 0:
        print("‚ùå prices.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –í–µ—Ä–Ω—ë–º –Ω—É–ª–∏.")
        return {t: 0 for t in TARGET_WEIGHTS.keys()}
    try:
        with open("prices.json", "r") as f:
            prices = json.load(f)
        normalized = {
            "BRK.B": prices.get("BRK-B", 0),
            "BTC": prices.get("BTC-USD", 0),
            "ETH": prices.get("ETH-USD", 0)
        }
        current_values = {
            "NVDA": prices.get("NVDA", 0),
            "AMD": prices.get("AMD", 0),
            "AVGO": prices.get("AVGO", 0),
            "MSFT": prices.get("MSFT", 0),
            "ORCL": prices.get("ORCL", 0),
            "PLTR": prices.get("PLTR", 0),
            "PANW": prices.get("PANW", 0),
            "CRWD": prices.get("CRWD", 0),
            "NFLX": prices.get("NFLX", 0),
            "BRK.B": normalized["BRK.B"],
            "MELI": prices.get("MELI", 0),
            "UBER": prices.get("UBER", 0),
            "BTC": normalized["BTC"],
            "ETH": normalized["ETH"],
        }
        return current_values
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ current_values: {e}")
        return {t: 0 for t in TARGET_WEIGHTS.keys()}

CURRENT_VALUES = load_current_values()

def get_balance():
    return (
        "üíº –ë–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è:\n"
        "- –ê–∫—Ü–∏–∏: 1 800‚Ç¨\n"
        "- –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: 200‚Ç¨\n"
        "- –í—Å–µ–≥–æ: 2 000‚Ç¨"
    )

def get_info():
    return "‚ÑπÔ∏è –ê–ª–º–∞–∑–Ω–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—è–º. –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥."

def get_day():
    return "üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è +0.0% (–ø—Ä–∏–º–µ—Ä)."

def get_month():
    return "üìÖ –û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü: +0.0% (–ø—Ä–∏–º–µ—Ä)"

def get_report():
    return (
        "üìä –û—Ç—á—ë—Ç –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:\n"
        "üí∞ –í—Å–µ–≥–æ –≤–Ω–µ—Å–µ–Ω–æ: 2000‚Ç¨\n"
        "üìà –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 2200‚Ç¨\n"
        "üéâ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: +200‚Ç¨ (+10.00%)"
    )

def get_status():
    now = datetime.now().strftime("%d.%m.%Y %H:%M")
    return f"üü¢ –ê–ª–º–∞–∑–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞.\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: {now}"

def get_history(ticker):
    try:
        with open("prices.json", "r") as f:
            prices = json.load(f)
        history = prices.get(ticker, [])
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤ prices.json ‚Äî —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω –∑–∞ –¥–Ω–∏, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ –ª–µ–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Å dict { "date":..., "price":... }
        # –ï—Å–ª–∏ —É —Ç–µ–±—è –ø—Ä–æ—Å—Ç–æ —Ü–µ–Ω—ã, —Ç–æ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å
        if isinstance(history, list) and history and isinstance(history[0], dict):
            return [p["price"] for p in history][-30:]
        elif isinstance(history, list) and all(isinstance(x, (int, float)) for x in history):
            return history[-30:]
        else:
            return []
    except Exception:
        return []

def check_trailing_stop(ticker, trailing_pct=0.01):
    prices = get_history(ticker)
    if len(prices) < 5:
        return False

    local_max = max(prices)
    current_price = prices[-1]

    drop = (local_max - current_price) / local_max
    return drop >= trailing_pct

def trailing_buy(category, capital):
    if category == "crypto":
        tickers = ["BTC", "ETH"]
    else:
        tickers = [t for t in TARGET_WEIGHTS if t not in ["BTC", "ETH"]]

    bought = []
    for ticker in tickers:
        last = LAST_PURCHASE.get(ticker)
        if last and last.month == datetime.now().month:
            continue

        if check_trailing_stop(ticker):
            amt = round(capital * TARGET_WEIGHTS[ticker], 2)
            LAST_PURCHASE[ticker] = datetime.now()
            bought.append(f"‚úÖ –ö—É–ø–ª–µ–Ω {ticker} –Ω–∞ {amt}‚Ç¨ (—Å–∫–∏–¥–∫–∞ 1% –æ—Ç max)")

    if not bought:
        return "‚è≥ –°–∏–≥–Ω–∞–ª–∞ –Ω–µ—Ç. –ê–ª–º–∞–∑–Ω–∞ –∂–¥—ë—Ç –æ—Ç–∫–∞—Ç."
    return "\n".join(bought)
